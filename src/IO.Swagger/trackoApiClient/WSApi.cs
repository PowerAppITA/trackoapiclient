/* 
 * Tracko
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.trackoApiClient
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactAddRequestResponseData</returns>
        BackofficeModelAPIWSContactAddRequestResponseData WSAddRequest (BackofficeModelAPIWSContactAddRequestRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactAddRequestResponseData</returns>
        ApiResponse<BackofficeModelAPIWSContactAddRequestResponseData> WSAddRequestWithHttpInfo (BackofficeModelAPIWSContactAddRequestRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData</returns>
        BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData WSCheckPrivacyPolicyChanged (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData</returns>
        ApiResponse<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData> WSCheckPrivacyPolicyChangedWithHttpInfo (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSPolicyGetPolicyResponseData</returns>
        BackofficeModelAPIWSPolicyGetPolicyResponseData WSGetPolicy (BackofficeModelAPIWSPolicyGetPolicyRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSPolicyGetPolicyResponseData</returns>
        ApiResponse<BackofficeModelAPIWSPolicyGetPolicyResponseData> WSGetPolicyWithHttpInfo (BackofficeModelAPIWSPolicyGetPolicyRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactGetUserAcceptanceResponseData</returns>
        BackofficeModelAPIWSContactGetUserAcceptanceResponseData WSGetUserAcceptance (BackofficeModelAPIWSContactGetUserAcceptanceRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactGetUserAcceptanceResponseData</returns>
        ApiResponse<BackofficeModelAPIWSContactGetUserAcceptanceResponseData> WSGetUserAcceptanceWithHttpInfo (BackofficeModelAPIWSContactGetUserAcceptanceRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactRetrivePanelLinkResponseData</returns>
        BackofficeModelAPIWSContactRetrivePanelLinkResponseData WSRetrivePanelLink (BackofficeModelAPIWSContactRetrivePanelLinkRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactRetrivePanelLinkResponseData</returns>
        ApiResponse<BackofficeModelAPIWSContactRetrivePanelLinkResponseData> WSRetrivePanelLinkWithHttpInfo (BackofficeModelAPIWSContactRetrivePanelLinkRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData</returns>
        BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData WSUpdateMultipleRequestStatus (BackofficeModelAPIWSContactUpdateMultipleRequestStatusRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData</returns>
        ApiResponse<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData> WSUpdateMultipleRequestStatusWithHttpInfo (BackofficeModelAPIWSContactUpdateMultipleRequestStatusRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactUpdateRequestStatusResponseData</returns>
        BackofficeModelAPIWSContactUpdateRequestStatusResponseData WSUpdateRequestStatus (BackofficeModelAPIWSContactUpdateRequestStatusRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactUpdateRequestStatusResponseData</returns>
        ApiResponse<BackofficeModelAPIWSContactUpdateRequestStatusResponseData> WSUpdateRequestStatusWithHttpInfo (BackofficeModelAPIWSContactUpdateRequestStatusRequestData oRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactAddRequestResponseData</returns>
        System.Threading.Tasks.Task<BackofficeModelAPIWSContactAddRequestResponseData> WSAddRequestAsync (BackofficeModelAPIWSContactAddRequestRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactAddRequestResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactAddRequestResponseData>> WSAddRequestAsyncWithHttpInfo (BackofficeModelAPIWSContactAddRequestRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData</returns>
        System.Threading.Tasks.Task<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData> WSCheckPrivacyPolicyChangedAsync (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData>> WSCheckPrivacyPolicyChangedAsyncWithHttpInfo (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSPolicyGetPolicyResponseData</returns>
        System.Threading.Tasks.Task<BackofficeModelAPIWSPolicyGetPolicyResponseData> WSGetPolicyAsync (BackofficeModelAPIWSPolicyGetPolicyRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSPolicyGetPolicyResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSPolicyGetPolicyResponseData>> WSGetPolicyAsyncWithHttpInfo (BackofficeModelAPIWSPolicyGetPolicyRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactGetUserAcceptanceResponseData</returns>
        System.Threading.Tasks.Task<BackofficeModelAPIWSContactGetUserAcceptanceResponseData> WSGetUserAcceptanceAsync (BackofficeModelAPIWSContactGetUserAcceptanceRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactGetUserAcceptanceResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactGetUserAcceptanceResponseData>> WSGetUserAcceptanceAsyncWithHttpInfo (BackofficeModelAPIWSContactGetUserAcceptanceRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactRetrivePanelLinkResponseData</returns>
        System.Threading.Tasks.Task<BackofficeModelAPIWSContactRetrivePanelLinkResponseData> WSRetrivePanelLinkAsync (BackofficeModelAPIWSContactRetrivePanelLinkRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactRetrivePanelLinkResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactRetrivePanelLinkResponseData>> WSRetrivePanelLinkAsyncWithHttpInfo (BackofficeModelAPIWSContactRetrivePanelLinkRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData</returns>
        System.Threading.Tasks.Task<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData> WSUpdateMultipleRequestStatusAsync (BackofficeModelAPIWSContactUpdateMultipleRequestStatusRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData>> WSUpdateMultipleRequestStatusAsyncWithHttpInfo (BackofficeModelAPIWSContactUpdateMultipleRequestStatusRequestData oRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactUpdateRequestStatusResponseData</returns>
        System.Threading.Tasks.Task<BackofficeModelAPIWSContactUpdateRequestStatusResponseData> WSUpdateRequestStatusAsync (BackofficeModelAPIWSContactUpdateRequestStatusRequestData oRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactUpdateRequestStatusResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactUpdateRequestStatusResponseData>> WSUpdateRequestStatusAsyncWithHttpInfo (BackofficeModelAPIWSContactUpdateRequestStatusRequestData oRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WSApi : IWSApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WSApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WSApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactAddRequestResponseData</returns>
        public BackofficeModelAPIWSContactAddRequestResponseData WSAddRequest (BackofficeModelAPIWSContactAddRequestRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactAddRequestResponseData> localVarResponse = WSAddRequestWithHttpInfo(oRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactAddRequestResponseData</returns>
        public ApiResponse< BackofficeModelAPIWSContactAddRequestResponseData > WSAddRequestWithHttpInfo (BackofficeModelAPIWSContactAddRequestRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSAddRequest");

            var localVarPath = "/api/WS/AddRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSAddRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactAddRequestResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactAddRequestResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactAddRequestResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactAddRequestResponseData</returns>
        public async System.Threading.Tasks.Task<BackofficeModelAPIWSContactAddRequestResponseData> WSAddRequestAsync (BackofficeModelAPIWSContactAddRequestRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactAddRequestResponseData> localVarResponse = await WSAddRequestAsyncWithHttpInfo(oRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactAddRequestResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactAddRequestResponseData>> WSAddRequestAsyncWithHttpInfo (BackofficeModelAPIWSContactAddRequestRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSAddRequest");

            var localVarPath = "/api/WS/AddRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSAddRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactAddRequestResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactAddRequestResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactAddRequestResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData</returns>
        public BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData WSCheckPrivacyPolicyChanged (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData> localVarResponse = WSCheckPrivacyPolicyChangedWithHttpInfo(oRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData</returns>
        public ApiResponse< BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData > WSCheckPrivacyPolicyChangedWithHttpInfo (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSCheckPrivacyPolicyChanged");

            var localVarPath = "/api/WS/CheckPrivacyPolicyChanged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSCheckPrivacyPolicyChanged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData</returns>
        public async System.Threading.Tasks.Task<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData> WSCheckPrivacyPolicyChangedAsync (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData> localVarResponse = await WSCheckPrivacyPolicyChangedAsyncWithHttpInfo(oRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData>> WSCheckPrivacyPolicyChangedAsyncWithHttpInfo (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSCheckPrivacyPolicyChanged");

            var localVarPath = "/api/WS/CheckPrivacyPolicyChanged";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSCheckPrivacyPolicyChanged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSPolicyCheckPrivacyPolicyChangedResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSPolicyGetPolicyResponseData</returns>
        public BackofficeModelAPIWSPolicyGetPolicyResponseData WSGetPolicy (BackofficeModelAPIWSPolicyGetPolicyRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSPolicyGetPolicyResponseData> localVarResponse = WSGetPolicyWithHttpInfo(oRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSPolicyGetPolicyResponseData</returns>
        public ApiResponse< BackofficeModelAPIWSPolicyGetPolicyResponseData > WSGetPolicyWithHttpInfo (BackofficeModelAPIWSPolicyGetPolicyRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSGetPolicy");

            var localVarPath = "/api/WS/GetPolicy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSGetPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSPolicyGetPolicyResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSPolicyGetPolicyResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSPolicyGetPolicyResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSPolicyGetPolicyResponseData</returns>
        public async System.Threading.Tasks.Task<BackofficeModelAPIWSPolicyGetPolicyResponseData> WSGetPolicyAsync (BackofficeModelAPIWSPolicyGetPolicyRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSPolicyGetPolicyResponseData> localVarResponse = await WSGetPolicyAsyncWithHttpInfo(oRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSPolicyGetPolicyResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSPolicyGetPolicyResponseData>> WSGetPolicyAsyncWithHttpInfo (BackofficeModelAPIWSPolicyGetPolicyRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSGetPolicy");

            var localVarPath = "/api/WS/GetPolicy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSGetPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSPolicyGetPolicyResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSPolicyGetPolicyResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSPolicyGetPolicyResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactGetUserAcceptanceResponseData</returns>
        public BackofficeModelAPIWSContactGetUserAcceptanceResponseData WSGetUserAcceptance (BackofficeModelAPIWSContactGetUserAcceptanceRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactGetUserAcceptanceResponseData> localVarResponse = WSGetUserAcceptanceWithHttpInfo(oRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactGetUserAcceptanceResponseData</returns>
        public ApiResponse< BackofficeModelAPIWSContactGetUserAcceptanceResponseData > WSGetUserAcceptanceWithHttpInfo (BackofficeModelAPIWSContactGetUserAcceptanceRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSGetUserAcceptance");

            var localVarPath = "/api/WS/GetUserAcceptance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSGetUserAcceptance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactGetUserAcceptanceResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactGetUserAcceptanceResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactGetUserAcceptanceResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactGetUserAcceptanceResponseData</returns>
        public async System.Threading.Tasks.Task<BackofficeModelAPIWSContactGetUserAcceptanceResponseData> WSGetUserAcceptanceAsync (BackofficeModelAPIWSContactGetUserAcceptanceRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactGetUserAcceptanceResponseData> localVarResponse = await WSGetUserAcceptanceAsyncWithHttpInfo(oRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactGetUserAcceptanceResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactGetUserAcceptanceResponseData>> WSGetUserAcceptanceAsyncWithHttpInfo (BackofficeModelAPIWSContactGetUserAcceptanceRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSGetUserAcceptance");

            var localVarPath = "/api/WS/GetUserAcceptance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSGetUserAcceptance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactGetUserAcceptanceResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactGetUserAcceptanceResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactGetUserAcceptanceResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactRetrivePanelLinkResponseData</returns>
        public BackofficeModelAPIWSContactRetrivePanelLinkResponseData WSRetrivePanelLink (BackofficeModelAPIWSContactRetrivePanelLinkRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactRetrivePanelLinkResponseData> localVarResponse = WSRetrivePanelLinkWithHttpInfo(oRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactRetrivePanelLinkResponseData</returns>
        public ApiResponse< BackofficeModelAPIWSContactRetrivePanelLinkResponseData > WSRetrivePanelLinkWithHttpInfo (BackofficeModelAPIWSContactRetrivePanelLinkRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSRetrivePanelLink");

            var localVarPath = "/api/WS/RetrivePanelLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSRetrivePanelLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactRetrivePanelLinkResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactRetrivePanelLinkResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactRetrivePanelLinkResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactRetrivePanelLinkResponseData</returns>
        public async System.Threading.Tasks.Task<BackofficeModelAPIWSContactRetrivePanelLinkResponseData> WSRetrivePanelLinkAsync (BackofficeModelAPIWSContactRetrivePanelLinkRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactRetrivePanelLinkResponseData> localVarResponse = await WSRetrivePanelLinkAsyncWithHttpInfo(oRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactRetrivePanelLinkResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactRetrivePanelLinkResponseData>> WSRetrivePanelLinkAsyncWithHttpInfo (BackofficeModelAPIWSContactRetrivePanelLinkRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSRetrivePanelLink");

            var localVarPath = "/api/WS/RetrivePanelLink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSRetrivePanelLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactRetrivePanelLinkResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactRetrivePanelLinkResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactRetrivePanelLinkResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData</returns>
        public BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData WSUpdateMultipleRequestStatus (BackofficeModelAPIWSContactUpdateMultipleRequestStatusRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData> localVarResponse = WSUpdateMultipleRequestStatusWithHttpInfo(oRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData</returns>
        public ApiResponse< BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData > WSUpdateMultipleRequestStatusWithHttpInfo (BackofficeModelAPIWSContactUpdateMultipleRequestStatusRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSUpdateMultipleRequestStatus");

            var localVarPath = "/api/WS/UpdateMultipleRequestStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSUpdateMultipleRequestStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData</returns>
        public async System.Threading.Tasks.Task<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData> WSUpdateMultipleRequestStatusAsync (BackofficeModelAPIWSContactUpdateMultipleRequestStatusRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData> localVarResponse = await WSUpdateMultipleRequestStatusAsyncWithHttpInfo(oRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData>> WSUpdateMultipleRequestStatusAsyncWithHttpInfo (BackofficeModelAPIWSContactUpdateMultipleRequestStatusRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSUpdateMultipleRequestStatus");

            var localVarPath = "/api/WS/UpdateMultipleRequestStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSUpdateMultipleRequestStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactUpdateMultipleRequestStatusResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>BackofficeModelAPIWSContactUpdateRequestStatusResponseData</returns>
        public BackofficeModelAPIWSContactUpdateRequestStatusResponseData WSUpdateRequestStatus (BackofficeModelAPIWSContactUpdateRequestStatusRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactUpdateRequestStatusResponseData> localVarResponse = WSUpdateRequestStatusWithHttpInfo(oRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>ApiResponse of BackofficeModelAPIWSContactUpdateRequestStatusResponseData</returns>
        public ApiResponse< BackofficeModelAPIWSContactUpdateRequestStatusResponseData > WSUpdateRequestStatusWithHttpInfo (BackofficeModelAPIWSContactUpdateRequestStatusRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSUpdateRequestStatus");

            var localVarPath = "/api/WS/UpdateRequestStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSUpdateRequestStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactUpdateRequestStatusResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactUpdateRequestStatusResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactUpdateRequestStatusResponseData)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of BackofficeModelAPIWSContactUpdateRequestStatusResponseData</returns>
        public async System.Threading.Tasks.Task<BackofficeModelAPIWSContactUpdateRequestStatusResponseData> WSUpdateRequestStatusAsync (BackofficeModelAPIWSContactUpdateRequestStatusRequestData oRequest)
        {
             ApiResponse<BackofficeModelAPIWSContactUpdateRequestStatusResponseData> localVarResponse = await WSUpdateRequestStatusAsyncWithHttpInfo(oRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oRequest"></param>
        /// <returns>Task of ApiResponse (BackofficeModelAPIWSContactUpdateRequestStatusResponseData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BackofficeModelAPIWSContactUpdateRequestStatusResponseData>> WSUpdateRequestStatusAsyncWithHttpInfo (BackofficeModelAPIWSContactUpdateRequestStatusRequestData oRequest)
        {
            // verify the required parameter 'oRequest' is set
            if (oRequest == null)
                throw new ApiException(400, "Missing required parameter 'oRequest' when calling WSApi->WSUpdateRequestStatus");

            var localVarPath = "/api/WS/UpdateRequestStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oRequest != null && oRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WSUpdateRequestStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BackofficeModelAPIWSContactUpdateRequestStatusResponseData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BackofficeModelAPIWSContactUpdateRequestStatusResponseData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BackofficeModelAPIWSContactUpdateRequestStatusResponseData)));
        }

    }
}
