/* 
 * Tracko
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BackofficeModelWSAPIHooksHandlerMailupData
    /// </summary>
    [DataContract]
    public partial class BackofficeModelWSAPIHooksHandlerMailupData :  IEquatable<BackofficeModelWSAPIHooksHandlerMailupData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BackofficeModelWSAPIHooksHandlerMailupData" /> class.
        /// </summary>
        /// <param name="idConsole">idConsole.</param>
        /// <param name="eventType">eventType.</param>
        /// <param name="idList">idList.</param>
        /// <param name="groups">groups.</param>
        /// <param name="email">email.</param>
        /// <param name="eventDate">eventDate.</param>
        /// <param name="sorgente">sorgente.</param>
        /// <param name="sorgenteSysName">sorgenteSysName.</param>
        public BackofficeModelWSAPIHooksHandlerMailupData(int? idConsole = default(int?), string eventType = default(string), string idList = default(string), string groups = default(string), string email = default(string), string eventDate = default(string), string sorgente = default(string), string sorgenteSysName = default(string))
        {
            this.IdConsole = idConsole;
            this.EventType = eventType;
            this.IdList = idList;
            this.Groups = groups;
            this.Email = email;
            this.EventDate = eventDate;
            this.Sorgente = sorgente;
            this.SorgenteSysName = sorgenteSysName;
        }
        
        /// <summary>
        /// Gets or Sets IdConsole
        /// </summary>
        [DataMember(Name="IdConsole", EmitDefaultValue=false)]
        public int? IdConsole { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name="EventType", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or Sets IdList
        /// </summary>
        [DataMember(Name="IdList", EmitDefaultValue=false)]
        public string IdList { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name="Groups", EmitDefaultValue=false)]
        public string Groups { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name="EventDate", EmitDefaultValue=false)]
        public string EventDate { get; set; }

        /// <summary>
        /// Gets or Sets Sorgente
        /// </summary>
        [DataMember(Name="Sorgente", EmitDefaultValue=false)]
        public string Sorgente { get; set; }

        /// <summary>
        /// Gets or Sets SorgenteSysName
        /// </summary>
        [DataMember(Name="SorgenteSysName", EmitDefaultValue=false)]
        public string SorgenteSysName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackofficeModelWSAPIHooksHandlerMailupData {\n");
            sb.Append("  IdConsole: ").Append(IdConsole).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  IdList: ").Append(IdList).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  Sorgente: ").Append(Sorgente).Append("\n");
            sb.Append("  SorgenteSysName: ").Append(SorgenteSysName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BackofficeModelWSAPIHooksHandlerMailupData);
        }

        /// <summary>
        /// Returns true if BackofficeModelWSAPIHooksHandlerMailupData instances are equal
        /// </summary>
        /// <param name="input">Instance of BackofficeModelWSAPIHooksHandlerMailupData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackofficeModelWSAPIHooksHandlerMailupData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdConsole == input.IdConsole ||
                    (this.IdConsole != null &&
                    this.IdConsole.Equals(input.IdConsole))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.IdList == input.IdList ||
                    (this.IdList != null &&
                    this.IdList.Equals(input.IdList))
                ) && 
                (
                    this.Groups == input.Groups ||
                    (this.Groups != null &&
                    this.Groups.Equals(input.Groups))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.Sorgente == input.Sorgente ||
                    (this.Sorgente != null &&
                    this.Sorgente.Equals(input.Sorgente))
                ) && 
                (
                    this.SorgenteSysName == input.SorgenteSysName ||
                    (this.SorgenteSysName != null &&
                    this.SorgenteSysName.Equals(input.SorgenteSysName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdConsole != null)
                    hashCode = hashCode * 59 + this.IdConsole.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.IdList != null)
                    hashCode = hashCode * 59 + this.IdList.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EventDate != null)
                    hashCode = hashCode * 59 + this.EventDate.GetHashCode();
                if (this.Sorgente != null)
                    hashCode = hashCode * 59 + this.Sorgente.GetHashCode();
                if (this.SorgenteSysName != null)
                    hashCode = hashCode * 59 + this.SorgenteSysName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
