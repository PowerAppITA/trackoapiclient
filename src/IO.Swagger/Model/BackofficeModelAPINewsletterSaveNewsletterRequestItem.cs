/* 
 * Tracko
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BackofficeModelAPINewsletterSaveNewsletterRequestItem
    /// </summary>
    [DataContract]
    public partial class BackofficeModelAPINewsletterSaveNewsletterRequestItem :  IEquatable<BackofficeModelAPINewsletterSaveNewsletterRequestItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BackofficeModelAPINewsletterSaveNewsletterRequestItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="typeId">typeId.</param>
        /// <param name="name">name.</param>
        /// <param name="exportPar">exportPar.</param>
        /// <param name="searchPar">searchPar.</param>
        /// <param name="isExportEnabled">isExportEnabled.</param>
        public BackofficeModelAPINewsletterSaveNewsletterRequestItem(int? id = default(int?), int? typeId = default(int?), string name = default(string), ModelLayerNewsletterMailUpExportParameter exportPar = default(ModelLayerNewsletterMailUpExportParameter), ModelLayerNewsletterMailUpSearchParameter searchPar = default(ModelLayerNewsletterMailUpSearchParameter), bool? isExportEnabled = default(bool?))
        {
            this.Id = id;
            this.TypeId = typeId;
            this.Name = name;
            this.ExportPar = exportPar;
            this.SearchPar = searchPar;
            this.IsExportEnabled = isExportEnabled;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets TypeId
        /// </summary>
        [DataMember(Name="typeId", EmitDefaultValue=false)]
        public int? TypeId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ExportPar
        /// </summary>
        [DataMember(Name="exportPar", EmitDefaultValue=false)]
        public ModelLayerNewsletterMailUpExportParameter ExportPar { get; set; }

        /// <summary>
        /// Gets or Sets SearchPar
        /// </summary>
        [DataMember(Name="searchPar", EmitDefaultValue=false)]
        public ModelLayerNewsletterMailUpSearchParameter SearchPar { get; set; }

        /// <summary>
        /// Gets or Sets IsExportEnabled
        /// </summary>
        [DataMember(Name="isExportEnabled", EmitDefaultValue=false)]
        public bool? IsExportEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackofficeModelAPINewsletterSaveNewsletterRequestItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ExportPar: ").Append(ExportPar).Append("\n");
            sb.Append("  SearchPar: ").Append(SearchPar).Append("\n");
            sb.Append("  IsExportEnabled: ").Append(IsExportEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BackofficeModelAPINewsletterSaveNewsletterRequestItem);
        }

        /// <summary>
        /// Returns true if BackofficeModelAPINewsletterSaveNewsletterRequestItem instances are equal
        /// </summary>
        /// <param name="input">Instance of BackofficeModelAPINewsletterSaveNewsletterRequestItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackofficeModelAPINewsletterSaveNewsletterRequestItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TypeId == input.TypeId ||
                    (this.TypeId != null &&
                    this.TypeId.Equals(input.TypeId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ExportPar == input.ExportPar ||
                    (this.ExportPar != null &&
                    this.ExportPar.Equals(input.ExportPar))
                ) && 
                (
                    this.SearchPar == input.SearchPar ||
                    (this.SearchPar != null &&
                    this.SearchPar.Equals(input.SearchPar))
                ) && 
                (
                    this.IsExportEnabled == input.IsExportEnabled ||
                    (this.IsExportEnabled != null &&
                    this.IsExportEnabled.Equals(input.IsExportEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TypeId != null)
                    hashCode = hashCode * 59 + this.TypeId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ExportPar != null)
                    hashCode = hashCode * 59 + this.ExportPar.GetHashCode();
                if (this.SearchPar != null)
                    hashCode = hashCode * 59 + this.SearchPar.GetHashCode();
                if (this.IsExportEnabled != null)
                    hashCode = hashCode * 59 + this.IsExportEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
